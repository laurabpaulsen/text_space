"""
Plot embeddings in 3D using plotly. Loads data generated by src/preprocess_data.py
"""

from pathlib import Path
import plotly.express as px
import pandas as pd
import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--csv_file", type = str, default="plotly_data.csv")

    return parser.parse_args()



def load_model(model_name):
    if model_name.lower() == "gpt2":
        from transformers import GPT2LMHeadModel, GPT2Tokenizer

        # load tokenizer and model
        tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
        model = GPT2LMHeadModel.from_pretrained('gpt2')

    elif model_name.lower() == "mt5":
        from transformers import MT5Tokenizer, MT5ForConditionalGeneration

        tokenizer = MT5Tokenizer.from_pretrained("google/mt5-small")
        model = MT5ForConditionalGeneration.from_pretrained("google/mt5-small")

    return model, tokenizer

def plot_embeddings_3d(data, savepath = None):

    # plotly
    fig = px.scatter_3d(data, x='x', y='y', z='z', color='author', hover_name='author', hover_data=['text'], text='title')

    fig.update_traces(textposition='top center', 
                      hovertemplate='Title: %{text}<br>' +
                                    'Lyrics: %{customdata[0]}<br>'
                      )
    
    fig.update_layout(
        height=800,
        title_text='TextSpace',
        font_family="serif"
    )

    # no bounding box
    fig.update_layout(
        scene = dict(
            xaxis = dict(showbackground=False, showticklabels=False),
            yaxis = dict(showbackground=False, showticklabels=False),
            zaxis = dict(showbackground=False, showticklabels=False)
            )
    )
    
    
    fig.show()
    if savepath:
        fig.write_image(savepath)
    
        # save html
        fig.write_html("textspace.html")



def main():
    path = Path(__file__)
    args = parse_args()

    # load data
    data = pd.read_csv(path.parents[1] / "data" / args.csv_file)

    # plot embeddings in 3D
    plot_embeddings_3d(data, savepath = path.parents[1] / "fig" / "embeddings_3d.png")


if __name__ == "__main__":
    main()
                     